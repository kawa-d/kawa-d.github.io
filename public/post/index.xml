<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on kawaD</title>
        <link>https://kawa-d.github.io/post/</link>
        <description>Recent content in Posts on kawaD</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Sat, 29 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kawa-d.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Microsoft Graph使ってAzureADユーザーを新規作成してみた</title>
        <link>https://kawa-d.github.io/p/msgraph/</link>
        <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://kawa-d.github.io/p/msgraph/</guid>
        <description>&lt;h2 id=&#34;microsft-graph&#34;&gt;Microsft Graph&lt;/h2&gt;
&lt;p&gt;・&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ja-jp/graph/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsft Graph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoftの各サービスに対してスクリプトやコマンドを使ってリクエストを送信するには、Microsoft Graphを活用します。Microsoft Graphは、Microsoftのさまざまなサービスへの統一的なアクセスを提供するプラットフォームです。&lt;/p&gt;
&lt;p&gt;今回は、PowerShellを使ってAzure ADの新しいユーザーを作成してみました。&lt;/p&gt;
&lt;h2 id=&#34;powershell&#34;&gt;PowerShell&lt;/h2&gt;
&lt;p&gt;ざっくり下記やる事書き起こします。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Microsoft GraphのSDKをインストール&lt;/li&gt;
&lt;li&gt;Azure上にMSGraphへ接続するためのアプリ作成・接続・認証する&lt;/li&gt;
&lt;li&gt;AzureADのアカウントを作成するスクリプト作成・実行する&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;microsoft-graphのsdkをインストール&#34;&gt;Microsoft GraphのSDKをインストール&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ja-jp/powershell/microsoftgraph/overview?toc=%2Fgraph%2Ftoc.json&amp;amp;view=graph-powershell-1.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考MS公式ドキュメント&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;まずpowershellを管理者権限で開いてSDKをインストールします。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# SDKインストール&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Install-Package Microsoft.Graph
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# インストールされてたらバージョン確認できる&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Get-InstalledModule Microsoft.Graph 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;もし、エラーでInstallできない場合、PowerShell 実行ポリシーを変えるとpowershellのコマンドやスクリプトが実行できます。
（自分はここでハマりました。）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;・&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;実行ポリシー公式ドキュメント&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;azure上にmsgraphへ接続するためのアプリ作成&#34;&gt;Azure上にMSGraphへ接続するためのアプリ作成&lt;/h3&gt;
&lt;p&gt;次にAzureのポータルサイトに入り、MSGraph用のアプリを作成します。&lt;/p&gt;
&lt;p&gt;アプリ作成の手順は&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ja-jp/powershell/microsoftgraph/app-only?view=graph-powershell-1.0&amp;amp;tabs=azure-portal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちら&lt;/a&gt;を参考にして進めます。&lt;/p&gt;
&lt;p&gt;手順10の&lt;code&gt;Select Certificates &amp;amp; secrets under Manage. Select Upload certificate under Certificates. Browse to your certificate&#39;s public key file and select Add.&lt;/code&gt; というのでハマり、証明書をアップロードってどうするの？と壁にぶち当たりました。&lt;/p&gt;
&lt;p&gt;下記手順で自己証明書を発行してアップロードします。(&lt;a class=&#34;link&#34; href=&#34;https://jpazureid.github.io/blog/azure-active-directory/operating-license-with-microsoft-graph/#idx2-2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらのサイト&lt;/a&gt;から引用してます。)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mycert&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; New-SelfSignedCertificate -Subject &lt;span class=&#34;s2&#34;&gt;&amp;#34;CN=SelfSignedCert&amp;#34;&lt;/span&gt; -CertStoreLocation &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cert:\CurrentUser\My&amp;#34;&lt;/span&gt;  -KeyExportPolicy Exportable -KeySpec Signature
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#ここで出力されたファイルをアップロードする&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mycert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Export-Certificate -FilePath &lt;span class=&#34;s2&#34;&gt;&amp;#34;.\SelfSignedCert.cer&amp;#34;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mycert&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Select Thumbprint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上記コマンド生成した、SelfSignedCert.cerをアプリにアップロードします。&lt;/p&gt;
&lt;p&gt;あとは、下記コマンドでAzure ADに接続できます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connect-MgGraph -Clientid &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;登録したアプリのアプリケーション (クライアント) ID&amp;gt;&amp;#34;&lt;/span&gt; -TenantId &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;アプリを登録したテナントのディレクトリ (テナント) ID&amp;gt;&amp;#34;&lt;/span&gt; -CertificateThumbprint &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;証明書の拇印&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Import-Module -Name Microsoft.Graph.Users
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;この辺の接続周りは先ほど紹介したMicrosoftのサポートブログを参考にしたほうがわかりやすいです。&lt;/p&gt;
&lt;p&gt;・&lt;a class=&#34;link&#34; href=&#34;https://jpazureid.github.io/blog/azure-active-directory/operating-license-with-microsoft-graph/#idx2-2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Graph PowerShell SDK を使用したライセンス管理操作の紹介&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;azureadのアカウントを作成するスクリプト実行する&#34;&gt;AzureADのアカウントを作成するスクリプト実行する&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/ja-jp/graph/api/group-post-members?view=graph-rest-1.0&amp;amp;tabs=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらのドキュメント&lt;/a&gt;に沿って&lt;code&gt;newAzureUser.ps1&lt;/code&gt;というファイル作成して、ユーザー作成のコードを書いてきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Import-Module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Users&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c&#34;&gt;# アカウントを有効&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;accountEnabled&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c&#34;&gt;# 表示名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;displayName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;edamame&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;mailNickname&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;edamame&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c&#34;&gt;# メールアドレス&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;userPrincipalName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;edamame@AAA.CCCC.BBB.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c&#34;&gt;#　パスワード&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;passwordProfile&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;forceChangePasswordNextSignIn&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;password&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;任意でパスワードを入れます&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;New-MgUser&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-BodyParameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$params&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上記実行すると、edamameさんが作成されました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/msgraph/edamame.png&#34;
	width=&#34;718&#34;
	height=&#34;331&#34;
	srcset=&#34;https://kawa-d.github.io/p/msgraph/edamame_hu6a361a6aabddeb3d41213388ab95d698_23197_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/msgraph/edamame_hu6a361a6aabddeb3d41213388ab95d698_23197_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;edamame.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;216&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;締め&#34;&gt;締め&lt;/h2&gt;
&lt;p&gt;ユーザー新規作成リクエストは別にpowershellじゃなくてもできるため、javascript使ってスプレッドシートにある入社情報からGASで実行するとか、Githubに社員台帳持っていて、actions回して棚卸とか色々自動化できそうでした。&lt;/p&gt;
&lt;p&gt;powershellはこういった自動化というよりかは、調査のためにwindows端末から手軽にアクセスするっていうので使ったほうが良さそうですね。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>github action使ってslack api 叩いてみた。</title>
        <link>https://kawa-d.github.io/p/tanaoroshi/</link>
        <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://kawa-d.github.io/p/tanaoroshi/</guid>
        <description>&lt;img src="https://kawa-d.github.io/p/tanaoroshi/tanaoroshi.png" alt="Featured image of post github action使ってslack api 叩いてみた。" /&gt;&lt;h2 id=&#34;アカウント棚卸&#34;&gt;アカウント棚卸&lt;/h2&gt;
&lt;p&gt;情シスを担当していると、SaaSアカウントの棚卸作業は非常に退屈ですよね。そこで、自動化できないかと考え、GitHub Actionsを利用してみることにしました。&lt;/p&gt;
&lt;p&gt;GitHub Actionsを使用して、SlackのAPIを叩いてワークスペースのメンバーを出力することを試してみました。（棚卸までの機能はまだ完全ではありませんが、とりあえず試してみました）&lt;/p&gt;
&lt;p&gt;内製せずに一括管理できるSaaSアカウント管理サービスも存在しますが、GitHub Actionsの動かし方に興味が湧いたので、試しに実行してみました。&lt;/p&gt;
&lt;h2 id=&#34;github-action&#34;&gt;Github Action&lt;/h2&gt;
&lt;p&gt;Githubでpushやmergeなどのタイミングでスクリプトやコマンドを実行できる仕組み。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/ja/actions/learn-github-actions/understanding-github-actions?learn=getting_started&amp;amp;learnProduct=actions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;詳しくはこちら&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GitHub Actions は、ビルド、テスト、デプロイのパイプラインを自動化できる
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;継続的インテグレーションと継続的デリバリー (CI/CD) のプラットフォームです。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;リポジトリに対するすべての pull request をビルドしてテストしたり、
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;マージされた pull request を運用環境にデプロイしたりするワークフローを作成できます。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GitHub Actions は、DevOps であるだけでなく、リポジトリで他のイベントが発生したときにワークフローを実行できます。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;たとえば、リポジトリで新しい issue が作成されるたびに、
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;適切なラベルを自動的に追加するワークフローを実行できます。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GitHub では、ワークフローを実行するための Linux、Windows、macOS 仮想マシンが提供されます。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;また、自身のデータセンターまたはクラウド インフラストラクチャで独自のセルフホスト ランナーをホストすることもできます。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;githubアクションではLinuxなどの仮想環境立ち上げて、スクリプト実行して、ビルドしたりテストしたりDevOpsな事を自動化してくれます。&lt;/p&gt;
&lt;p&gt;apiとか叩いて良い仕組みに持っていけないかなと思いました。&lt;/p&gt;
&lt;p&gt;slackのapiを叩くようなスクリプトを用意して、ワークフローに組み込んで、実行できるかやってみます。&lt;/p&gt;
&lt;h3 id=&#34;ワークフロー&#34;&gt;ワークフロー&lt;/h3&gt;
&lt;p&gt;まずはワークフローを作っていきます。&lt;/p&gt;
&lt;p&gt;リポジトリ配下に&lt;code&gt;.github/workflows&lt;/code&gt;を作成して、そこにワークフローを定義していきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions_slack_api&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;request-slack-api&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ubuntu-latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;SLACK_API_TOKEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${{ secrets.SLACK_API_TOKEN }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;actions/checkout@v3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Run echo-members.sh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sh ./scripts/echo-members.sh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;SlackのAPIトークンをGithubのSecretに保存して管理下に置いたんですが、それをどうやって持ってくるのかってとこではまりました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    env: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      run: sh ./scripts/echo-members.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;これでワークフローに呼び出して、シェルスクリプトに環境変数として呼べばいけました。&lt;/p&gt;
&lt;p&gt;次にecho-members.shを作成して、slackのワークスペースにいるuserを取ってきます。&lt;/p&gt;
&lt;h3 id=&#34;シェルスクリプト作成&#34;&gt;シェルスクリプト作成&lt;/h3&gt;
&lt;p&gt;次にシェルスクリプト作成します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./scripts/echo-members.sh&lt;/code&gt;のようなディレクトリ構成でシェルスクリプトを作成します。&lt;/p&gt;
&lt;p&gt;Ubuntu呼び出してるので、RubyとかJavascriptの環境も作れるようですが、ここではshellでサクッとやっていきます。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Slack APIのエンドポイントとトークンを設定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;API_ENDPOINT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://slack.com/api/users.list&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;SLACK_TOKEN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$SLACK_API_TOKEN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# curlコマンドを使ってAPIを呼び出し、結果を変数に格納&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;curl -s -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$SLACK_TOKEN&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$API_ENDPOINT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# レスポンスを表示（デバッグ用）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$response&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;これをGithubにあげて、ワークフローを手動実行してみます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/tanaoroshi/response.png&#34;
	width=&#34;1279&#34;
	height=&#34;726&#34;
	srcset=&#34;https://kawa-d.github.io/p/tanaoroshi/response_huce259cb291712afccb2b55b9e0a14594_45680_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/tanaoroshi/response_huce259cb291712afccb2b55b9e0a14594_45680_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;response.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;422px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;だだだ～っととれました。&lt;/p&gt;
&lt;h2 id=&#34;締め&#34;&gt;締め&lt;/h2&gt;
&lt;p&gt;アカウントの棚卸しする場合、人事台帳がGithubに上がってたら、いい感じに運用できそうだなと思いましたが、人事台帳をGithubベースに持っていくのが大変かもですね。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>＜miibo＞社内問い合わせをAIが自動回答するchatbot作ってみた</title>
        <link>https://kawa-d.github.io/p/aichatbot/</link>
        <pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://kawa-d.github.io/p/aichatbot/</guid>
        <description>&lt;h2 id=&#34;ヘルプデスク作業&#34;&gt;ヘルプデスク作業&lt;/h2&gt;
&lt;p&gt;ヘルプデスク作業って少し好きで、誰かの困り事をどうしたどうした？と寄り添って、それを解決すると「ありがとうございます！」なんて言われると、いやー今日も仕事したな～って気分になりますよね。&lt;/p&gt;
&lt;p&gt;でも、問い合わせ内容によっては、再起動すれば治るような事や、社内ドキュメント読めばわかるような事も結構あり、ただ時間だけとられて、情シス的にやりたいことが後回しになり、結局なんにもできなかった。という事があります。&lt;/p&gt;
&lt;p&gt;ドキュメントは結構そろってるのにあんまり理解されないし読んでくれない。どうすればみんな自動的に欲しいデータを取ってくれるのか&amp;hellip;.&lt;/p&gt;
&lt;p&gt;このAI革命時代に何かできることはないかな～と探していると、会社のAIトピックを扱ってるSlackチャンネルにてmiiboの話が出ていて、AIを使ったchatbotがプログラム不要で作れて、Slackともサクッと連携可能！とのことだったので、これならできそう！やってみよう！となりました。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://note.com/makunugi/n/n2a393732cd36&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;このnoteにこれからやる事すべて書いてあります。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;miibo登録してchatbot作成&#34;&gt;miibo登録してchatbot作成&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://miibo.jp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;miibo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;miiboにサインアップしてchatbotを新規作成します。今回は推奨されてる通常モードで作成しました。&lt;/p&gt;
&lt;p&gt;答えれない質問はGPT4によって自動回答するような設定もできます。&lt;/p&gt;
&lt;p&gt;また、miiboのプラン（お金）によって精度高さを選び、会話回数に上限が設けられています。今回使用する無料枠は一番精度の高いGPT-4で約月15回くらい会話ができました。&lt;/p&gt;
&lt;p&gt;キャラ設定もします。一人称とか口調を設定できるようです。関西弁とかもできました。&lt;/p&gt;
&lt;p&gt;色々設定して、めちゃくちゃなAIchatbotできました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/aichatbot/kaiwa.png&#34;
	width=&#34;1390&#34;
	height=&#34;460&#34;
	srcset=&#34;https://kawa-d.github.io/p/aichatbot/kaiwa_hu4a7bc3a78cf0b7f1ed2a8a33ba96ca19_33337_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/aichatbot/kaiwa_hu4a7bc3a78cf0b7f1ed2a8a33ba96ca19_33337_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;kaiwa.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;302&#34;
		data-flex-basis=&#34;725px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;ナレッジを追加する&#34;&gt;ナレッジを追加する&lt;/h2&gt;
&lt;p&gt;miiboにはナレッジデータストアという、GPT-4やGPT-3.5といったAIモデルを利用したチャットボットに、「知識」を与えることができる機能があります。&lt;/p&gt;
&lt;p&gt;ナレッジを追加するとそのナレッジをベースに答えてくれるので、ナレッジに社内運用知識を追加していきます。&lt;/p&gt;
&lt;p&gt;今回はPCに関する問い合わせについて構築していきます。&lt;/p&gt;
&lt;p&gt;PCの問い合わせ内容の中で一般的な技術的な知識で解決できそうなものは、本来のGPT4の力を借りたほうが最適な回答や一次対応をしてくれそうでした。&lt;/p&gt;
&lt;p&gt;例えば下記のような「インターネットに接続できなくなりました」という問い合わせの一次対応はどの会社でも同じような形かと思います。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/aichatbot/inquiry1.png&#34;
	width=&#34;1363&#34;
	height=&#34;736&#34;
	srcset=&#34;https://kawa-d.github.io/p/aichatbot/inquiry1_hud46bcfe751c0a8173ea155e410ddbc46_65389_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/aichatbot/inquiry1_hud46bcfe751c0a8173ea155e410ddbc46_65389_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;inquiry1.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;444px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;おお～、一次対応としては良い回答な気がします。&lt;/p&gt;
&lt;h4 id=&#34;レンタルpcの運用回答&#34;&gt;レンタルPCの運用回答&lt;/h4&gt;
&lt;p&gt;実際に今の会社でのPCに関して、社内の運用知識を使ってみます。&lt;/p&gt;
&lt;p&gt;PCは外部からレンタルしていて、２年単位で回していて、PCの切り替えについて問い合わせをもらうことがあります。&lt;/p&gt;
&lt;p&gt;具体的にどんな問い合わせかというと、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「退職者のPCはどうすればいいですか？」&lt;/li&gt;
&lt;li&gt;「新しいMacはいつ届きますか？」&lt;/li&gt;
&lt;li&gt;「Macが不調で切り替えを早くしたいですが可能ですか？」&lt;/li&gt;
&lt;li&gt;「PCの画面割れしてしまいました。修理はどうすればよいでしょうか？」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの問い合わせに対して一次対応は、ほぼ同じ回答になるため、これ答えてくれるとうれしいですね。&lt;/p&gt;
&lt;h5 id=&#34;ナレッジ入れてみる&#34;&gt;ナレッジ入れてみる&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/aichatbot/knowledge.png&#34;
	width=&#34;819&#34;
	height=&#34;460&#34;
	srcset=&#34;https://kawa-d.github.io/p/aichatbot/knowledge_hu7f9baab7d7fe80b0c3212ad1c2e635e0_22929_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/aichatbot/knowledge_hu7f9baab7d7fe80b0c3212ad1c2e635e0_22929_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;knowledge.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;ナレッジをこんな感じでダーッと文章で手入力で入れました。手入力以外でも、URL指定、CSV形式、API経由などデータを入れる方法はいくつかありました。&lt;/p&gt;
&lt;p&gt;では、問い合わせてみます。「退職者のPCはどうすればいいですか？」という問い合わせについて確認していきます。&lt;/p&gt;
&lt;p&gt;まずはナレッジがない場合の回答がこちら。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/aichatbot/inquiry2.png&#34;
	width=&#34;1380&#34;
	height=&#34;560&#34;
	srcset=&#34;https://kawa-d.github.io/p/aichatbot/inquiry2_hu021faa5dd3c3671130a8e6514df11ec7_45511_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/aichatbot/inquiry2_hu021faa5dd3c3671130a8e6514df11ec7_45511_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;inquiry2.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;246&#34;
		data-flex-basis=&#34;591px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;うーん、ユーザーがする事というより、端末管理者がやる事についての回答になってますね。&lt;/p&gt;
&lt;p&gt;次にナレッジがある場合の回答がこちら。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/aichatbot/inquiry4.png&#34;
	width=&#34;1385&#34;
	height=&#34;460&#34;
	srcset=&#34;https://kawa-d.github.io/p/aichatbot/inquiry4_hu8e567e16c4ac8b96c648509f0e3cd3c1_32088_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/aichatbot/inquiry4_hu8e567e16c4ac8b96c648509f0e3cd3c1_32088_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;inquiry4.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;722px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;「しらんけど」ｗ　&lt;/p&gt;
&lt;p&gt;「しらんけど」は自分がカスタマイズしてキャラ設定したんですが、ちょっと微妙で良くないですね。&lt;/p&gt;
&lt;p&gt;ただ、回答の内容は、とても良い回答で社内運用に沿った内容になりました！すごーい。&lt;/p&gt;
&lt;h2 id=&#34;slack連携してみる&#34;&gt;slack連携してみる&lt;/h2&gt;
&lt;p&gt;冒頭で記載したnoteの記事にある、&lt;a class=&#34;link&#34; href=&#34;https://note.com/makunugi/n/n2a393732cd36?magazine_key=m125bbb29d4ac&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Slackボット追加編&lt;/a&gt;　に全部書いてますのでそれに沿ってやっていきます。&lt;/p&gt;
&lt;p&gt;このchatbotを限定公開か、一般公開すれば外部サービスとの連携ができます。限定公開は、オーナーと管理者のみチャット画面が公開され、外部サービス連携は可能になるような設定です。限定公開で進めていきます。&lt;/p&gt;
&lt;p&gt;noteに詳しく書いてるので、パチパチと設定を入れていきました。&lt;/p&gt;
&lt;p&gt;実際にslackでchatbotを呼び出してみます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/aichatbot/inquiry_slack.png&#34;
	width=&#34;819&#34;
	height=&#34;460&#34;
	srcset=&#34;https://kawa-d.github.io/p/aichatbot/inquiry_slack_hu771748b264411ce0f6f768f124c3195e_72660_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/aichatbot/inquiry_slack_hu771748b264411ce0f6f768f124c3195e_72660_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;inquiry_slack.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;いや～すごい！一日あれば簡単に導入できますね。&lt;/p&gt;
&lt;h2 id=&#34;締め&#34;&gt;締め&lt;/h2&gt;
&lt;p&gt;めっちゃ簡単にできて、かなり有用なアプリになりそうですね。ただ、これを導入するとなるとコストが気になりますね。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://kawa-d.github.io/p/aichatbot/plan.png&#34;
	width=&#34;1611&#34;
	height=&#34;585&#34;
	srcset=&#34;https://kawa-d.github.io/p/aichatbot/plan_hu1f00f9a761dd144370598d259e743e7d_47750_480x0_resize_box_3.png 480w, https://kawa-d.github.io/p/aichatbot/plan_hu1f00f9a761dd144370598d259e743e7d_47750_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;plan.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;275&#34;
		data-flex-basis=&#34;660px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;miiboは以下の項目でプランが変わってきます。特に、会話上限とデータストア登録数で変動します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作成エージェント数&lt;/li&gt;
&lt;li&gt;月当たりの会話上限の目安&lt;/li&gt;
&lt;li&gt;登録トピック数上限&lt;/li&gt;
&lt;li&gt;シナリオ上限&lt;/li&gt;
&lt;li&gt;プロンプト最大文字数&lt;/li&gt;
&lt;li&gt;データストア登録可能数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一番気になるのは問い合わせの会話がどれくらいの頻度でするのかってとこですかね。&lt;/p&gt;
&lt;p&gt;社内のバックオフィス全部ひっくるめて、構成すると、規模が大きくなりお金がかかりそうですね。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>HugoとGithub Pageでブログ用サイト作ってみました</title>
        <link>https://kawa-d.github.io/p/hello-world/</link>
        <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://kawa-d.github.io/p/hello-world/</guid>
        <description>&lt;h2 id=&#34;気まぐれ&#34;&gt;気まぐれ&lt;/h2&gt;
&lt;p&gt;自分は気まぐれに何か新しいことを始めることは好きですが、なかなか続けれない性格で、最近ではそれに反省し、継続することの大切さに気付きました。&lt;/p&gt;
&lt;p&gt;このブログも気まぐれで始めましたが、１年間ぐらいは続けたいです。自分の成長や学びをブログに残し、いつか他の人にも役立つ情報を提供できるように努めたいです。充実するといいな～。&lt;/p&gt;
&lt;p&gt;自分の仕事は情報システム関連で、その分野に特化した技術ブログをメインに書いていきたいと思っています。ただ、サブテーマとして「継続」を意識しているので、単に日記だけではなく、幅広いジャンルの記事を書いていきたいです。&lt;/p&gt;
&lt;h2 id=&#34;github-page&#34;&gt;Github Page&lt;/h2&gt;
&lt;p&gt;タイトル通りHugoとGithub Pageでブログ用サイト作ってみました。&lt;/p&gt;
&lt;p&gt;Github Pageは静的サイトをホストできるところです。Githubアカウント持ってたら無料で使えます。広告も貼れるらしいです。
&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github Page&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;HUGO&lt;/h2&gt;
&lt;p&gt;HUGOは静的サイトジェネレーターというツールで、ブログのような見た目のサイトを簡単に作成してくれるフレームワークです。HUGOにはさまざまなThemeが存在し、優れたデザイナーたちが作ったおしゃれなThemeがたくさんあります。自分の好みに合ったThemeを見つけて、そのリポジトリをクローンし、HUGOに組み込むことで利用できるようになります。Themeを選ぶと、該当するGitHubのリポジトリに移動することができます。Themeのリポジトリには充実したドキュメントが用意されており、Themeの導入が容易になっています。&lt;/p&gt;
&lt;p&gt;このブログは「Stack」というThemeを使用しています。使いやすそうでデザインが好きで選びました。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stack&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HUGO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;構築やり方wsl2&#34;&gt;構築やり方（WSL2）&lt;/h2&gt;
&lt;p&gt;自分の環境：Windows10, WSL2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大枠&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Github Pageを用意する&lt;/li&gt;
&lt;li&gt;ローカルにHUGO入れる&lt;/li&gt;
&lt;li&gt;pushしてHUGO×Github Pageでサイト公開&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;1-github-pageを用意する&#34;&gt;1. Github Pageを用意する&lt;/h4&gt;
&lt;p&gt;公式がわかりやすく手順を書いてますので、それ通りに作成します。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/ja/pages/getting-started-with-github-pages/creating-a-github-pages-site&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github Pageの作成手順&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-hugo入れる&#34;&gt;2. HUGO入れる&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;リポジトリをcloneしてローカル環境にブログ用のディレクトリを準備します。&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/installation/linux/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HUGO Installation Linux&lt;/a&gt;を参考に進めてください。私の環境はWSLのUbuntuです。DockerのイメージでHUGOをインストールすることもできましたが、Windows10のVmmemの問題が未だに解決しておらず、
&lt;ul&gt;
&lt;li&gt;一般的なトラブルシューティング方法である.wslconfig設定ファイルの変更でも解決せず、まだ続いています。Windows 11にアップグレードすると解決するらしいです。Macが欲しい&amp;hellip;&lt;/li&gt;
&lt;li&gt;どこかのサイトでapt-getを使ってインストールするとバージョンが最新にならず、Themeによっては反映されないという噂を聞いたので、Goを直接WSLにインストールして動かすことにしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GoをインストールしてHUGOを起動する手順は&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/installation/linux/#build-from-source&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Build from source&lt;/a&gt;に詳しく書かれています。&lt;/p&gt;
&lt;p&gt;Goを扱ったことがなかったのですが、以下のパスを設定する必要があるんですね。
これせずに&lt;code&gt;hugo version&lt;/code&gt;を実行してもバージョンが表示されず、ディレクトリ内でhugoコマンドを呼び出すことができませんでした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;GOPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;GOBIN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GOPATH&lt;/span&gt;/bin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$GOPATH&lt;/span&gt;/bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/#create-a-site&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Create a site&lt;/a&gt;を参考にして、HUGOを立ち上げていきます。&lt;code&gt;hugo new site &amp;lt;xxxxxx&amp;gt;&lt;/code&gt;コマンドを使用して、HUGOのファイルをリポジトリに追加します。ここでの&lt;code&gt;&amp;lt;xxxxxx&amp;gt;&lt;/code&gt;はリポジトリ名です。必要に応じて&lt;code&gt;-f&lt;/code&gt;フラグを使用してリポジトリに強制的に追加しました。&lt;/p&gt;
&lt;p&gt;お好みのThemeを選んで&lt;code&gt;git submodule add https://&amp;lt;bbbbbb&amp;gt; themes/&amp;lt;bbbbbb&amp;gt;&lt;/code&gt;を実行し、&lt;code&gt;hugo server&lt;/code&gt;を起動すると、開発環境の構築は完了です。bbbbbbはTheme名など&lt;/p&gt;
&lt;p&gt;あとは、&lt;code&gt;content/post&lt;/code&gt;ディレクトリにMarkdownファイルを追加して記事を作成していきます。Themeによってやや異なるかもしれませんが、基本的な構成はThemeのドキュメントに記載されているはずです。&lt;/p&gt;
&lt;h4 id=&#34;3-pushしてhugogithub-pageでサイト公開&#34;&gt;3. pushしてHUGO×Github Pageでサイト公開&lt;/h4&gt;
&lt;p&gt;以下は、修正されたMarkdown形式の文章です。&lt;/p&gt;
&lt;p&gt;hugoコマンドを使用すると、公開用のファイルが&lt;code&gt;./public&lt;/code&gt;ディレクトリに生成されます。公開したいブログのMarkdownファイルのメタ情報には、&lt;code&gt;draft: false&lt;/code&gt;と設定しておく必要があります。&lt;/p&gt;
&lt;p&gt;HUGO × GitHub Pagesでホストする場合の手順がありました。&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Host on GitHub&lt;/a&gt;に記載されています。GitHub Actionsを使用して、プッシュのタイミングでビルドを行うような形です。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;hugo.toml&lt;/code&gt;ファイルに&lt;code&gt;base_URL&lt;/code&gt;などの設定を記述し、プッシュするとGitHub Actionsが作動し、自動的にビルドしてくれます。GitHub Actionsの経験がなかったので少し勉強になりました。&lt;/p&gt;
&lt;h3 id=&#34;締めブログについて&#34;&gt;締め：ブログについて&lt;/h3&gt;
&lt;p&gt;久しぶりにブログ書いて、やっぱり文章書くの難しい。超読みずらい。chatgptに構成してもらったり、勉強しよう。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
