<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on kawaD</title>
        <link>https://kawa-d.github.io/post/</link>
        <description>Recent content in Posts on kawaD</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 09 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kawa-d.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>HugoとGithub Pageでブログ用サイト作ってみました</title>
        <link>https://kawa-d.github.io/post/hello-world/</link>
        <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://kawa-d.github.io/post/hello-world/</guid>
        <description>&lt;h2 id=&#34;気まぐれ&#34;&gt;気まぐれ&lt;/h2&gt;
&lt;p&gt;自分は気まぐれに何か新しいことを始めることは好きですが、なかなか続けれない性格で、最近ではそれに反省し、継続することの大切さに気付きました。&lt;/p&gt;
&lt;p&gt;このブログも気まぐれで始めましたが、１年間ぐらいは続けたいです。自分の成長や学びをブログに残し、いつか他の人にも役立つ情報を提供できるように努めたいです。充実するといいな～。&lt;/p&gt;
&lt;p&gt;自分の仕事は情報システム関連で、その分野に特化した技術ブログをメインに書いていきたいと思っています。ただ、サブテーマとして「継続」を意識しているので、単に日記だけではなく、幅広いジャンルの記事を書いていきたいです。&lt;/p&gt;
&lt;h2 id=&#34;github-page&#34;&gt;Github Page&lt;/h2&gt;
&lt;p&gt;タイトル通りHugoとGithub Pageでブログ用サイト作ってみました。&lt;/p&gt;
&lt;p&gt;Github Pageは静的サイトをホストできるところです。Githubアカウント持ってたら無料で使えます。広告も貼れるらしいです。
&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github Page&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;HUGO&lt;/h2&gt;
&lt;p&gt;HUGOは静的サイトジェネレーターというツールで、ブログのような見た目のサイトを簡単に作成してくれるフレームワークです。HUGOにはさまざまなThemeが存在し、優れたデザイナーたちが作ったおしゃれなThemeがたくさんあります。自分の好みに合ったThemeを見つけて、そのリポジトリをクローンし、HUGOに組み込むことで利用できるようになります。Themeを選ぶと、該当するGitHubのリポジトリに移動することができます。Themeのリポジトリには充実したドキュメントが用意されており、Themeの導入が容易になっています。&lt;/p&gt;
&lt;p&gt;このブログは「Stack」というThemeを使用しています。使いやすそうでデザインが好きで選びました。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stack&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HUGO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;構築やり方wsl2&#34;&gt;構築やり方（WSL2）&lt;/h2&gt;
&lt;p&gt;自分の環境：Windows10, WSL2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大枠&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Github Pageを用意する&lt;/li&gt;
&lt;li&gt;ローカルにHUGO入れる&lt;/li&gt;
&lt;li&gt;pushしてHUGO×Github Pageでサイト公開&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;1-github-pageを用意する&#34;&gt;1. Github Pageを用意する&lt;/h4&gt;
&lt;p&gt;公式がわかりやすく手順を書いてますので、それ通りに作成します。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/ja/pages/getting-started-with-github-pages/creating-a-github-pages-site&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github Pageの作成手順&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-hugo入れる&#34;&gt;2. HUGO入れる&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;リポジトリをcloneしてローカル環境にブログ用のディレクトリを準備します。&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/installation/linux/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HUGO Installation Linux&lt;/a&gt;を参考に進めてください。私の環境はWSLのUbuntuです。DockerのイメージでHUGOをインストールすることもできましたが、Windows10のVmmemの問題が未だに解決しておらず、
&lt;ul&gt;
&lt;li&gt;一般的なトラブルシューティング方法である.wslconfig設定ファイルの変更でも解決せず、まだ続いています。Windows 11にアップグレードすると解決するらしいです。Macが欲しい&amp;hellip;&lt;/li&gt;
&lt;li&gt;どこかのサイトでapt-getを使ってインストールするとバージョンが最新にならず、Themeによっては反映されないという噂を聞いたので、Goを直接WSLにインストールして動かすことにしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GoをインストールしてHUGOを起動する手順は&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/installation/linux/#build-from-source&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Build from source&lt;/a&gt;に詳しく書かれています。&lt;/p&gt;
&lt;p&gt;Goを扱ったことがなかったのですが、以下のパスを設定する必要があるんですね。
これせずに&lt;code&gt;hugo version&lt;/code&gt;を実行してもバージョンが表示されず、ディレクトリ内でhugoコマンドを呼び出すことができませんでした。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$HOME/go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$GOPATH/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$GOPATH/bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/#create-a-site&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Create a site&lt;/a&gt;を参考にして、HUGOを立ち上げていきます。&lt;code&gt;hugo new site &amp;lt;xxxxxx&amp;gt;&lt;/code&gt;コマンドを使用して、HUGOのファイルをリポジトリに追加します。ここでの&lt;code&gt;&amp;lt;xxxxxx&amp;gt;&lt;/code&gt;はリポジトリ名です。必要に応じて&lt;code&gt;-f&lt;/code&gt;フラグを使用してリポジトリに強制的に追加しました。&lt;/p&gt;
&lt;p&gt;お好みのThemeを選んで&lt;code&gt;git submodule add https://&amp;lt;bbbbbb&amp;gt; themes/&amp;lt;bbbbbb&amp;gt;&lt;/code&gt;を実行し、&lt;code&gt;hugo server&lt;/code&gt;を起動すると、開発環境の構築は完了です。bbbbbbはTheme名など&lt;/p&gt;
&lt;p&gt;あとは、&lt;code&gt;content/post&lt;/code&gt;ディレクトリにMarkdownファイルを追加して記事を作成していきます。Themeによってやや異なるかもしれませんが、基本的な構成はThemeのドキュメントに記載されているはずです。&lt;/p&gt;
&lt;h4 id=&#34;3-pushしてhugogithub-pageでサイト公開&#34;&gt;3. pushしてHUGO×Github Pageでサイト公開&lt;/h4&gt;
&lt;p&gt;以下は、修正されたMarkdown形式の文章です。&lt;/p&gt;
&lt;p&gt;hugoコマンドを使用すると、公開用のファイルが&lt;code&gt;./public&lt;/code&gt;ディレクトリに生成されます。公開したいブログのMarkdownファイルのメタ情報には、&lt;code&gt;draft: false&lt;/code&gt;と設定しておく必要があります。&lt;/p&gt;
&lt;p&gt;HUGO × GitHub Pagesでホストする場合の手順がありました。&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Host on GitHub&lt;/a&gt;に記載されています。GitHub Actionsを使用して、プッシュのタイミングでビルドを行うような形です。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;hugo.toml&lt;/code&gt;ファイルに&lt;code&gt;base_URL&lt;/code&gt;などの設定を記述し、プッシュするとGitHub Actionsが作動し、自動的にビルドしてくれます。GitHub Actionsの経験がなかったので少し勉強になりました。&lt;/p&gt;
&lt;h3 id=&#34;締めブログについて&#34;&gt;締め：ブログについて&lt;/h3&gt;
&lt;p&gt;久しぶりにブログ書いて、やっぱり文章書くの難しい。超読みずらい。chatgptに構成してもらったり、勉強しよう。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
